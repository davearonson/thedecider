require 'spec_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to specify the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator.  If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails.  There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.
#
# Compared to earlier versions of this generator, there is very limited use of
# stubs and message expectations in this spec.  Stubs are only used when there
# is no simpler way to get a handle on the object needed for the example.
# Message expectations are only used when there is no simpler way to specify
# that an instance is receiving a specific message.

describe FactorsController do

  # TODO: make the below stuff into fixtures, or better yet use factory_girl?

  valid_user_attributes = {
    username: 'dave',  # so it will be an admin
    password: 'testing',
    realname: 'Fester Bestertester',
    email: 'fester@bestertester.org'
  }

  User.create valid_user_attributes
  @user = User.find_by_username valid_user_attributes[:username]

  valid_login_attributes = {
    username: valid_user_attributes[:username],
    password: valid_user_attributes[:password],
  }

  valid_decision_attributes = {
    name: 'what name to use',
    user_id: @user.id
  }

  Decision.create valid_decision_attributes
  @decision = Decision.find_by_name valid_decision_attributes[:name]

  valid_factor_attributes = {
    name: 'blargh',
    weight_id: Level::Medium,
    decision_id: @decision.id
  }
  valid_attributes = valid_factor_attributes

  Factor.create valid_factor_attributes
  @factor = Factor.find_by_name valid_factor_attributes[:name]

  before :each do
    @user = User.find_by_username valid_user_attributes[:username]
    sign_in @user
  end

  # since factors are now part of form, there is no
  # edit in controller, only new/create!
  # describe "GET edit" do
  # end

  describe "POST create" do
    describe "with valid params" do
      it "creates a new Factor" do
        expect {
          post :create, :factor => valid_attributes
        }.to change(Factor, :count).by(1)
      end

      it "assigns a newly created factor as @factor" do
        post :create, :factor => valid_attributes
        assigns(:factor).should be_a(Factor)
        assigns(:factor).should be_persisted
      end

      it "redirects to the decision" do
        post :create, :factor => valid_attributes
        response.should redirect_to( edit_decision_path( Factor.last.decision ))
      end
    end

    describe "with invalid params" do
      it "doesn't create a new factor" do
        pending "need to catch the exception here"
        # Trigger the behavior that occurs when invalid params are submitted
        Factor.any_instance.stub(:save).and_return(false)
        post :create, :factor => {}
        assigns(:factor).should be_a_new(Factor)
      end

      it "re-renders the 'new' template" do
        pending "need to catch the exception here, and/or in the actual code"
        # Trigger the behavior that occurs when invalid params are submitted
        Factor.any_instance.stub(:save).and_return(false)
        post :create, :factor => {}
        response.should render_template("new")
      end
    end
  end

  # since factors are now part of form, there is no
  # update in controller, only new/create!
  # describe "PUT update" do
  # end

  # since factors are now part of form, there is no
  # delete in controller, only new/create!
  # describe "DELETE destroy" do
  # end

end
